class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid[0].size();
        int n=grid.size();
        int count=0;
        map<pair<int,int>,bool> visited;
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                    visited[{i,j}]=true;
                }
                if(grid[i][j]==1){
                    count++;
                }
            }
        }
        int time=-1;
        int cnt=0;
        while(!q.empty()){
            int N=q.size();
            for(int i=0;i<N;i++){
                auto front=q.front();
                int row=front.first;
                int col=front.second;
                // int t=front.first;
                q.pop();
                int drow[]={0,0,-1,1};
                int dcol[]={-1,1,0,0};
                for(int i=0;i<4;i++){
                    int nrow=row+drow[i];
                    int ncol=col+dcol[i];
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && !visited[{nrow,ncol}] ){
                        q.push({nrow,ncol});
                        visited[{nrow,ncol}]=true;
                        cnt++;
                    }
                }
                
            }
            time++;
        }
        if(cnt!=count){
            return -1;
        }
        else if(time==-1){
            return 0;
        }
        else{
            return time;
        }
    }
};
