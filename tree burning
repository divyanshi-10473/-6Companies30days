/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* parent(TreeNode* root,int start, map<TreeNode*,TreeNode*> &mp){
              queue<TreeNode*> q;
              q.push(root);
              TreeNode* target;
              while(!q.empty()){
                TreeNode* node=q.front();
                q.pop();
                if(node->val==start){
                    target=node;
                }
                if(node->left){
                    q.push(node->left);
                    mp[node->left]=node;
                }
                if(node->right){
                    q.push(node->right);
                    mp[node->right]=node;
                }
              }
              return target;
    }
    int amountOfTime(TreeNode* root, int start) {
          map<TreeNode*,TreeNode*> m;
          TreeNode* target=parent(root,start,m);
          map<TreeNode*,bool> visited;
          queue<TreeNode*> q;
          q.push(target);
          visited[target]=true;
          int time=-1;
          while(!q.empty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                TreeNode* node=q.front();
                q.pop();
                visited[node]=true;
                if(node->left && !visited[node->left]){
                    q.push(node->left);
                    visited[node->left]=true;
                }
                if(node->right && !visited[node->right]){
                    q.push(node->right);
                    visited[node->right]=true;
                }
                if(m[node] && !visited[m[node]]){
                    q.push(m[node]);
                    visited[m[node]]=true;
                }

            }
            time++;

          }
        return time;
    }
};
