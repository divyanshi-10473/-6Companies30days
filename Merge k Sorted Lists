/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
       ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto compare = [](ListNode* a, ListNode* b) {
            return a->val > b->val;
        };
        
        priority_queue<ListNode*, vector<ListNode*>, decltype(compare)> q(compare);

        for (int i = 0; i < lists.size(); i++) {
            if (lists[i]) {
                q.push(lists[i]);
            }
        }

        ListNode* root = new ListNode(0); // Dummy node to simplify the process
        ListNode* temp = root;

        while (!q.empty()) {
            ListNode* node = q.top();
            q.pop();
            temp->next = node;
            temp = temp->next;

            if (node->next) {
                q.push(node->next);
            }
        }

        return root->next; // Return the next node to skip the dummy node
    }
    
};
